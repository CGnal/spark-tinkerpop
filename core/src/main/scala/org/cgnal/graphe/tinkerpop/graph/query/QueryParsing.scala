package org.cgnal.graphe.tinkerpop.graph.query

import javax.script.{ Bindings, Compilable, ScriptEngine }

import org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine

/**
 * Introduces query parsing behaviour to the implementing class, together with a way to evaluate the compiled script.
 * @tparam A the type of element against which the expected script is expected to be run; this reflects into `Bindings`
 *           passed during evalutation of the `CompiledQuery`.
 */
trait QueryParsing[A] {

  /**
   * The type of the engine used to produce the `CompiledQuery`.
   */
  protected type Engine <: ScriptEngine with Compilable

  /**
   * The `ScriptEngine` implementation needed to compile queries.
   */
  protected def scriptEngine: Engine

  /**
   * Creates the `Bindings` instance needed to evaluate the `CompiledQuery` into the `ScriptResult`.
   * @param element the instance from which the `Bindings` are generated
   * @param script the script instance to which the `Bindings` will be added later
   * @return
   */
  protected def createBindings(element: A, script: String): Bindings

  /**
   * Compiles the script using the `scriptEngine`.
   * @param script the `String` instance that is meant to be compiled and evaluated against an element of type `A`
   * @return the `CompiledQuery` instance
   */
  final def compileScript(script: String) = CompiledQuery(script, scriptEngine.compile(script))

  /**
   * Evaluates the compiled script against the bindings generated by `createBindings`.
   * @param element the instance from which the `Bindings` are generated
   * @param script the script that needs evaluation
   * @return the `ScriptResult` containing the result of evaluating the `CompiledQuery`, which is often `AnyRef`
   */
  def eval(element: A, script: String) = compileScript(script).eval {
    createBindings(element, script)
  }

  /**
   * Evaluates the compiled script against the bindings generated by `createBindings`.
   * @param element the instance from which the `Bindings` are generated
   * @param compiledQuery the compiled query that needs evaluation
   * @return the `ScriptResult` containing the result of evaluating the `CompiledQuery`, which is often `AnyRef`
   */
  def eval(element: A, compiledQuery: CompiledQuery) = compiledQuery.eval {
    createBindings(element, compiledQuery.originalScript)
  }

}

/**
 * Modifies the `QueryParsing` trait to implement a `GremlinGroovyScriptEngine`.
 */
trait GroovyQueryParsing[A] { this: QueryParsing[A] =>

  final protected type Engine = GremlinGroovyScriptEngine

  final protected lazy val scriptEngine = new Engine

}
